{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["UserStore","extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4f2a7bf9.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor(){\r\n        extendObservable(this,{\r\n            loading:true,\r\n            isLoggedIn:false,\r\n            username:'',\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default UserStore;","import React, { Component } from 'react';\r\n\r\nclass InputField extends Component{\r\n  render(){\r\n    return (\r\n      <div className=\"inputField\">\r\n          <input\r\n            className='input'\r\n            type={this.props.type}\r\n            placeholder={this.props.placeholder}\r\n            value={this.props.value}\r\n            onChange={(e)=> this.props.onChange(e.target.value)}\r\n            />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React, { Component } from 'react';\r\n\r\nclass SubmitButton extends Component{\r\n  render(){\r\n    return (\r\n      <div className=\"submitButton\">\r\n          <button \r\n          className='btn'\r\n          disabled={this.props.disabled}\r\n          onClick={()=> this.props.onClick()}\r\n          >\r\n          {this.props.text}\r\n          </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React, { Component } from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\n\r\nclass LoginForm extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            username:'',\r\n            password:'',\r\n            buttonDisabled:false\r\n        }\r\n    }\r\n\r\n    setInputValue(property, val){\r\n        val= val.trim();\r\n        if(val.length > 12){\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            [property]: val\r\n        })\r\n\r\n    }\r\n\r\n    resetForm(){\r\n        this.setState({\r\n            username:'',\r\n            password:'',\r\n            buttonDisabled:false \r\n        })\r\n    }\r\n\r\n    async doLogin(){\r\n        if(!this.state.username){\r\n            return;\r\n        }\r\n        if(!this.state.password){\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            buttonDisabled:true\r\n        })\r\n\r\n        try{\r\n            var res = await fetch('./login', {\r\n                method:'post',\r\n                headers:{\r\n                    'Accept':'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body:JSON.stringify({\r\n                    username:this.state.username,\r\n                    password:this.state.password\r\n                })\r\n            })\r\n            var result = await res.json();\r\n            if(result && result.success){\r\n                UserStore.isLoggedIn = true;\r\n                UserStore.username = result.username;\r\n            }\r\n            else if(result && result.success === false){\r\n                this.resetForm();\r\n                alert(result.msg);\r\n            }\r\n        }\r\n        catch(e){\r\n            console.log(e);\r\n            this.resetForm();\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n    return (\r\n      <div className=\"loginform\">\r\n          Log in\r\n          <InputField\r\n            type='text'\r\n            placeholder='Username'\r\n            value={this.state.username ? this.state.username: ''}\r\n            onChange={(val) => this.setInputValue('username', val )}\r\n          />\r\n          <InputField\r\n            type='password'\r\n            placeholder='Password'\r\n            value={this.state.password ? this.state.password: ''}\r\n            onChange={(val) => this.setInputValue('password', val )}\r\n          />\r\n\r\n          <SubmitButton\r\n                text='Log in'\r\n                disabled={this.state.buttonDisabled}\r\n                onClick={() => this.doLogin()}\r\n          />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport UserStore from './stores/UserStore';\nimport LoginForm from './LoginForm';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport './App.css';\n\nclass App extends Component{\n\n  async componentDidMount(){\n\n    try{\n\n      var res = await fetch('./isLoggedIn', {\n         method: 'post',\n         headers:{\n           'Accept':'application/json',\n           'Content-Type': 'application/json'\n         }\n      });\n\n      var result = await res.json();\n\n      if(result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n      }\n      else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n\n    }\n    catch(e){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n       \n    }\n\n  }\n\n  async doLogout(){\n\n    try{\n\n      var res = await fetch('./Logout', {\n         method: 'post',\n         headers:{\n           'Accept':'application/json',\n           'Content-Type': 'application/json'\n         }\n      });\n\n      var result = await res.json();\n\n      if(result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n\n    }\n    catch(e){\n     console.log(e);\n    }\n\n  }\n\n  render(){\n    if(UserStore.loading){\n      return(\n        <div className=\"app\">\n           <div className=\"container\">\n            Loading. Please Wait.. \n           </div>\n        </div>\n      );\n    }\n    else{\n      if(UserStore.isLoggedIn){\n        return(\n          <div className=\"app\">\n             <div className=\"container\">\n              Welcome {UserStore.username} \n\n              <SubmitButton \n              text={'Log out'}\n              disabled={false}\n              onClick = {() => this.doLogout()}\n              />\n             </div>\n          </div>\n        );\n      }\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            <LoginForm />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}